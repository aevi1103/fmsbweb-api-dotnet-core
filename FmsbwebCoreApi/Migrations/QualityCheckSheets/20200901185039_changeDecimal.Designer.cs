// <auto-generated />
using System;
using FmsbwebCoreApi.Context.QualityCheckSheets;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FmsbwebCoreApi.Migrations.QualityCheckSheets
{
    [DbContext(typeof(QualityCheckSheetsContext))]
    [Migration("20200901185039_changeDecimal")]
    partial class changeDecimal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.Characteristic", b =>
                {
                    b.Property<int>("CharacteristicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DisplayAsId")
                        .HasColumnType("int");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Gauge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HelperText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Max")
                        .HasColumnName("Max")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("Min")
                        .HasColumnName("Min")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("Nom")
                        .HasColumnName("Nom")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("OrganizationPartId")
                        .HasColumnType("int");

                    b.Property<bool?>("PassFail")
                        .HasColumnType("bit");

                    b.Property<string>("ReferenceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacteristicId");

                    b.HasIndex("DisplayAsId");

                    b.HasIndex("OrganizationPartId");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheet", b =>
                {
                    b.Property<int>("CheckSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClockNumber")
                        .HasColumnType("int");

                    b.Property<int>("ControlMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("HourId")
                        .HasColumnType("int");

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationPartId")
                        .HasColumnType("int");

                    b.Property<string>("Shift")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ShiftDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("CheckSheetId");

                    b.HasIndex("ControlMethodId");

                    b.HasIndex("LineId");

                    b.HasIndex("OrganizationPartId");

                    b.ToTable("CheckSheets");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheetEntry", b =>
                {
                    b.Property<int>("CheckSheetEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("int");

                    b.Property<int>("CheckSheetId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Part")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubMachineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.HasKey("CheckSheetEntryId");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("CheckSheetId");

                    b.HasIndex("SubMachineId");

                    b.ToTable("CheckSheetEntries");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.ControlMethod", b =>
                {
                    b.Property<int>("ControlMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("ControlMethodId");

                    b.ToTable("ControlMethods");

                    b.HasData(
                        new
                        {
                            ControlMethodId = 1,
                            Method = "Machining Check Sheet",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 216, DateTimeKind.Local).AddTicks(8877)
                        },
                        new
                        {
                            ControlMethodId = 2,
                            Method = "Quality Inspection Summary",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 223, DateTimeKind.Local).AddTicks(8872)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.DisplayAs", b =>
                {
                    b.Property<int>("DisplayAsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("DisplayAsId");

                    b.ToTable("DisplayAs");

                    b.HasData(
                        new
                        {
                            DisplayAsId = 1,
                            Display = "Number",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(9191)
                        },
                        new
                        {
                            DisplayAsId = 2,
                            Display = "Percent",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1049)
                        },
                        new
                        {
                            DisplayAsId = 3,
                            Display = "Degrees",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1125)
                        },
                        new
                        {
                            DisplayAsId = 4,
                            Display = "NegativePositive",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1157)
                        },
                        new
                        {
                            DisplayAsId = 5,
                            Display = "PassFail",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1188)
                        },
                        new
                        {
                            DisplayAsId = 6,
                            Display = "Positive",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1224)
                        },
                        new
                        {
                            DisplayAsId = 7,
                            Display = "Reference",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(1255)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.Line", b =>
                {
                    b.Property<int>("LineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LineId");

                    b.ToTable("Lines");

                    b.HasData(
                        new
                        {
                            LineId = 1,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 224, DateTimeKind.Local).AddTicks(1468),
                            Value = "1"
                        },
                        new
                        {
                            LineId = 2,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 224, DateTimeKind.Local).AddTicks(3604),
                            Value = "2"
                        },
                        new
                        {
                            LineId = 3,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 224, DateTimeKind.Local).AddTicks(3708),
                            Value = "3"
                        },
                        new
                        {
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 224, DateTimeKind.Local).AddTicks(3748),
                            Value = "4"
                        },
                        new
                        {
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3838),
                            Value = "5"
                        },
                        new
                        {
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4618),
                            Value = "6"
                        },
                        new
                        {
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5338),
                            Value = "7"
                        },
                        new
                        {
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6189),
                            Value = "8"
                        },
                        new
                        {
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6910),
                            Value = "9"
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.Machine", b =>
                {
                    b.Property<int>("MachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MachineId");

                    b.HasIndex("LineId");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            MachineId = 1,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 224, DateTimeKind.Local).AddTicks(5887),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 2,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3206),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 3,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3330),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 4,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3470),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 5,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3549),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 6,
                            LineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3679),
                            Value = "Accuriser"
                        },
                        new
                        {
                            MachineId = 7,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3899),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 8,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4055),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 9,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4133),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 10,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4254),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 11,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4334),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 12,
                            LineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4457),
                            Value = "Accuriser"
                        },
                        new
                        {
                            MachineId = 13,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4660),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 14,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4814),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 15,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4889),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 16,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5007),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 17,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5085),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 18,
                            LineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5209),
                            Value = "Accuriser"
                        },
                        new
                        {
                            MachineId = 19,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5380),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 20,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5540),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 21,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5620),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 22,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5737),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 23,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5817),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 24,
                            LineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6105),
                            Value = "Accuriser"
                        },
                        new
                        {
                            MachineId = 25,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6235),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 26,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6391),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 27,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6467),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 28,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6586),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 29,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6663),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 30,
                            LineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6833),
                            Value = "Accuriser"
                        },
                        new
                        {
                            MachineId = 31,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6956),
                            Value = "Okuma SP"
                        },
                        new
                        {
                            MachineId = 32,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7110),
                            Value = "Turmat"
                        },
                        new
                        {
                            MachineId = 33,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7186),
                            Value = "Chiron SP"
                        },
                        new
                        {
                            MachineId = 34,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7308),
                            Value = "Drill"
                        },
                        new
                        {
                            MachineId = 35,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7384),
                            Value = "Diamond Turn SP"
                        },
                        new
                        {
                            MachineId = 36,
                            LineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7714),
                            Value = "Accuriser"
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.OrganizationPart", b =>
                {
                    b.Property<int>("OrganizationPartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ControlMethodId")
                        .HasColumnType("int");

                    b.Property<string>("LeftHandPart")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightHandPart")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("OrganizationPartId");

                    b.HasIndex("ControlMethodId");

                    b.ToTable("OrganizationParts");

                    b.HasData(
                        new
                        {
                            OrganizationPartId = 1,
                            ControlMethodId = 1,
                            LeftHandPart = "81309",
                            RightHandPart = "81310",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(3222)
                        },
                        new
                        {
                            OrganizationPartId = 2,
                            ControlMethodId = 1,
                            LeftHandPart = "81311",
                            RightHandPart = "81312",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(5463)
                        },
                        new
                        {
                            OrganizationPartId = 3,
                            ControlMethodId = 1,
                            LeftHandPart = "81313",
                            RightHandPart = "81314",
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 226, DateTimeKind.Local).AddTicks(5530)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.ReCheck", b =>
                {
                    b.Property<int>("ReCheckId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CheckSheetEntryId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsInitialValue")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.HasKey("ReCheckId");

                    b.HasIndex("CheckSheetEntryId");

                    b.ToTable("ReChecks");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.SubMachine", b =>
                {
                    b.Property<int>("SubMachineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MachineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubMachineId");

                    b.HasIndex("MachineId");

                    b.ToTable("SubMachines");

                    b.HasData(
                        new
                        {
                            SubMachineId = 1,
                            MachineId = 1,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(508),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 2,
                            MachineId = 1,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3020),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 3,
                            MachineId = 1,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3125),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 4,
                            MachineId = 2,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3292),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 5,
                            MachineId = 3,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3383),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 6,
                            MachineId = 3,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3427),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 7,
                            MachineId = 4,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3512),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 8,
                            MachineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3598),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 9,
                            MachineId = 5,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3634),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 10,
                            MachineId = 6,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3723),
                            Value = "Accuriser"
                        },
                        new
                        {
                            SubMachineId = 11,
                            MachineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3943),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 12,
                            MachineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(3978),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 13,
                            MachineId = 7,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4013),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 14,
                            MachineId = 8,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4097),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 15,
                            MachineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4178),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 16,
                            MachineId = 9,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4214),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 17,
                            MachineId = 10,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4294),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 18,
                            MachineId = 11,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4380),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 19,
                            MachineId = 11,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4415),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 20,
                            MachineId = 12,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4583),
                            Value = "Accuriser"
                        },
                        new
                        {
                            SubMachineId = 21,
                            MachineId = 13,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4704),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 22,
                            MachineId = 13,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4739),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 23,
                            MachineId = 13,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4774),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 24,
                            MachineId = 14,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4855),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 25,
                            MachineId = 15,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4931),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 26,
                            MachineId = 15,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(4968),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 27,
                            MachineId = 16,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5047),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 28,
                            MachineId = 17,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5132),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 29,
                            MachineId = 17,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5168),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 30,
                            MachineId = 18,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5306),
                            Value = "Accuriser"
                        },
                        new
                        {
                            SubMachineId = 31,
                            MachineId = 19,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5425),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 32,
                            MachineId = 19,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5461),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 33,
                            MachineId = 19,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5495),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 34,
                            MachineId = 20,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5584),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 35,
                            MachineId = 21,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5662),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 36,
                            MachineId = 21,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5697),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 37,
                            MachineId = 22,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5779),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 38,
                            MachineId = 23,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5864),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 39,
                            MachineId = 23,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(5900),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 40,
                            MachineId = 24,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6152),
                            Value = "Accuriser"
                        },
                        new
                        {
                            SubMachineId = 41,
                            MachineId = 25,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6278),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 42,
                            MachineId = 25,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6315),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 43,
                            MachineId = 25,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6349),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 44,
                            MachineId = 26,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6432),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 45,
                            MachineId = 27,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6510),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 46,
                            MachineId = 27,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6545),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 47,
                            MachineId = 28,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6626),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 48,
                            MachineId = 29,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6708),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 49,
                            MachineId = 29,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6743),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 50,
                            MachineId = 30,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6879),
                            Value = "Accuriser"
                        },
                        new
                        {
                            SubMachineId = 51,
                            MachineId = 31,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(6999),
                            Value = "OK1"
                        },
                        new
                        {
                            SubMachineId = 52,
                            MachineId = 31,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7035),
                            Value = "OK2"
                        },
                        new
                        {
                            SubMachineId = 53,
                            MachineId = 31,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7070),
                            Value = "OK3"
                        },
                        new
                        {
                            SubMachineId = 54,
                            MachineId = 32,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7151),
                            Value = "Turmat"
                        },
                        new
                        {
                            SubMachineId = 55,
                            MachineId = 33,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7232),
                            Value = "Chiron 1"
                        },
                        new
                        {
                            SubMachineId = 56,
                            MachineId = 33,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7268),
                            Value = "Chiron 2"
                        },
                        new
                        {
                            SubMachineId = 57,
                            MachineId = 34,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7348),
                            Value = "Drill"
                        },
                        new
                        {
                            SubMachineId = 58,
                            MachineId = 35,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7464),
                            Value = "DT1"
                        },
                        new
                        {
                            SubMachineId = 59,
                            MachineId = 35,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7660),
                            Value = "DT2"
                        },
                        new
                        {
                            SubMachineId = 60,
                            MachineId = 36,
                            TimeStamp = new DateTime(2020, 9, 1, 14, 50, 38, 225, DateTimeKind.Local).AddTicks(7757),
                            Value = "Accuriser"
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.Characteristic", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.DisplayAs", "DisplayAs")
                        .WithMany()
                        .HasForeignKey("DisplayAsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.OrganizationPart", "OrganizationPart")
                        .WithMany("Characteristics")
                        .HasForeignKey("OrganizationPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheet", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.ControlMethod", "ControlMethod")
                        .WithMany()
                        .HasForeignKey("ControlMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.Line", "Line")
                        .WithMany()
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.OrganizationPart", "OrganizationPart")
                        .WithMany()
                        .HasForeignKey("OrganizationPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheetEntry", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.Characteristic", "Characteristic")
                        .WithMany("CheckSheetEntries")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheet", "CheckSheet")
                        .WithMany("CheckSheetEntries")
                        .HasForeignKey("CheckSheetId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.SubMachine", "SubMachine")
                        .WithMany("CheckSheetEntries")
                        .HasForeignKey("SubMachineId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.Machine", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.Line", "Line")
                        .WithMany("Machines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.OrganizationPart", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.ControlMethod", "ControlMethod")
                        .WithMany("OrganizationParts")
                        .HasForeignKey("ControlMethodId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.ReCheck", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.CheckSheetEntry", "CheckSheetEntry")
                        .WithMany("Rechecks")
                        .HasForeignKey("CheckSheetEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.QualityCheckSheets.SubMachine", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.QualityCheckSheets.Machine", "Machine")
                        .WithMany("SubMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
