// <auto-generated />
using System;
using FmsbwebCoreApi.Context.Iconics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FmsbwebCoreApi.Migrations.Iconics
{
    [DbContext(typeof(IconicsContext))]
    [Migration("20201124215356_addInitialValues")]
    partial class addInitialValues
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagName", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dept")
                        .HasColumnName("dept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsLastCounter")
                        .HasColumnName("isLastCounter")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasColumnName("line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Stamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagName");

                    b.ToTable("KEPserverTagNames");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameGroup", b =>
                {
                    b.Property<Guid>("KepServerTagNameGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("KepServerTagNameGroupId");

                    b.ToTable("KepServerTagNameGroups");

                    b.HasData(
                        new
                        {
                            KepServerTagNameGroupId = new Guid("17fb0d78-3b3d-4b1e-890b-1058d4d59d19"),
                            GroupName = "A2",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 45, DateTimeKind.Local).AddTicks(936)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("60cde83c-2fee-4594-afd0-2c4f9a2fbbe0"),
                            GroupName = "A3",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 46, DateTimeKind.Local).AddTicks(9497)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("d1501b14-2a69-4c03-870d-895fb37236b8"),
                            GroupName = "A4",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 46, DateTimeKind.Local).AddTicks(9955)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("2d6af88b-e4b5-40eb-a9b9-25bb044c88cb"),
                            GroupName = "A5",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(29)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("96cd0c8d-52a7-4e01-b38d-021b7910f2ad"),
                            GroupName = "A6",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(96)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("7122a990-09f7-4ac5-b169-66948182e2da"),
                            GroupName = "A7",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(166)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("13e0013c-5278-4c6b-bdcc-68716e9c47aa"),
                            GroupName = "A8",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(232)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("32298129-21e4-4469-9ca9-9f9304854ce4"),
                            GroupName = "A9",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(295)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameMonitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KepServerTagNameGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KepServerTagNameGroupId");

                    b.HasIndex("TagName");

                    b.ToTable("KepServerTagNameMonitors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2af9989a-bdab-40c6-9f8e-912b60e6bced"),
                            KepServerTagNameGroupId = new Guid("17fb0d78-3b3d-4b1e-890b-1058d4d59d19"),
                            TagName = "A2_PACKOUT_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 46, DateTimeKind.Local).AddTicks(8576)
                        },
                        new
                        {
                            Id = new Guid("4f4403aa-154d-4db8-bbfe-0f76d2b895a6"),
                            KepServerTagNameGroupId = new Guid("60cde83c-2fee-4594-afd0-2c4f9a2fbbe0"),
                            TagName = "A3_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 46, DateTimeKind.Local).AddTicks(9879)
                        },
                        new
                        {
                            Id = new Guid("f1d141ff-fa86-4d5c-91cb-d7d50dca3762"),
                            KepServerTagNameGroupId = new Guid("d1501b14-2a69-4c03-870d-895fb37236b8"),
                            TagName = "A4_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 46, DateTimeKind.Local).AddTicks(9994)
                        },
                        new
                        {
                            Id = new Guid("1df5e880-70e5-45a4-979f-0aa4bb11e0c8"),
                            KepServerTagNameGroupId = new Guid("2d6af88b-e4b5-40eb-a9b9-25bb044c88cb"),
                            TagName = "A5_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(61)
                        },
                        new
                        {
                            Id = new Guid("16ba0e58-074c-4dac-82cc-3e6f9888b435"),
                            KepServerTagNameGroupId = new Guid("96cd0c8d-52a7-4e01-b38d-021b7910f2ad"),
                            TagName = "A6_M2_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(135)
                        },
                        new
                        {
                            Id = new Guid("81360f87-f965-4525-a7a1-d225929b0288"),
                            KepServerTagNameGroupId = new Guid("7122a990-09f7-4ac5-b169-66948182e2da"),
                            TagName = "A7_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(200)
                        },
                        new
                        {
                            Id = new Guid("f965ea10-22d3-4ff8-bcc6-1f854a16bc38"),
                            KepServerTagNameGroupId = new Guid("13e0013c-5278-4c6b-bdcc-68716e9c47aa"),
                            TagName = "A8_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(266)
                        },
                        new
                        {
                            Id = new Guid("e3f2c2fa-c054-42eb-87a9-385800e8b886"),
                            KepServerTagNameGroupId = new Guid("32298129-21e4-4469-9ca9-9f9304854ce4"),
                            TagName = "A9_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 24, 16, 53, 56, 47, DateTimeKind.Local).AddTicks(329)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepserverMachineDowntime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentVal")
                        .IsRequired()
                        .HasColumnName("currentVal")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("DowntimeMinutes")
                        .HasColumnName("downtime_minutes")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("EndStamp")
                        .HasColumnName("end_stamp")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsInitialSave")
                        .HasColumnName("isInitialSave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OriginalEndStamp")
                        .HasColumnName("original_end_stamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OriginalStartStamp")
                        .HasColumnName("original_start_stamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartStamp")
                        .HasColumnName("start_stamp")
                        .HasColumnType("datetime");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnName("tagName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("time_stamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("KEPServer_MachineDowntime");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameMonitor", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameGroup", "KepServerTagNameGroup")
                        .WithMany()
                        .HasForeignKey("KepServerTagNameGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.Iconics.KepServerTagName", "KepServerTagName")
                        .WithMany()
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
