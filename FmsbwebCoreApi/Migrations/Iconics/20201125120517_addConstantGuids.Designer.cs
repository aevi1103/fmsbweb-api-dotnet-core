// <auto-generated />
using System;
using FmsbwebCoreApi.Context.Iconics;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FmsbwebCoreApi.Migrations.Iconics
{
    [DbContext(typeof(IconicsContext))]
    [Migration("20201125120517_addConstantGuids")]
    partial class addConstantGuids
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagName", b =>
                {
                    b.Property<string>("TagName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dept")
                        .HasColumnName("dept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsLastCounter")
                        .HasColumnName("isLastCounter")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasColumnName("line")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Stamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagName");

                    b.ToTable("KEPserverTagNames");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameGroup", b =>
                {
                    b.Property<Guid>("KepServerTagNameGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(5)")
                        .HasMaxLength(5);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("KepServerTagNameGroupId");

                    b.ToTable("KepServerTagNameGroups");

                    b.HasData(
                        new
                        {
                            KepServerTagNameGroupId = new Guid("01b888a3-00ca-4736-96ae-1636dc7ec914"),
                            GroupName = "A2",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 988, DateTimeKind.Local).AddTicks(9518)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("bd9eae20-60c7-44cd-ae2e-96c5f015f82e"),
                            GroupName = "A3",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9475)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("77e6d96c-f58d-46ea-a00d-5f962cfaf67b"),
                            GroupName = "A4",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9704)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("c26e4341-8e94-48f8-9eb6-fd2c5061bae3"),
                            GroupName = "A5",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9759)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("f5ede641-fb76-40d5-924b-5d28ceea1ac9"),
                            GroupName = "A6",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9809)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("1ace746f-f44f-47c4-bb9c-6c49fc550488"),
                            GroupName = "A7",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9872)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("13667af3-8a37-456a-8d65-5e98627af1ad"),
                            GroupName = "A8",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9923)
                        },
                        new
                        {
                            KepServerTagNameGroupId = new Guid("3ea0d0fe-9c1b-4171-baa1-aa5b6e6422e2"),
                            GroupName = "A9",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9973)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameMonitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KepServerTagNameGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KepServerTagNameGroupId");

                    b.HasIndex("TagName");

                    b.ToTable("KepServerTagNameMonitors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b37a8885-7889-407f-a44a-3cbcf3ee1a14"),
                            KepServerTagNameGroupId = new Guid("01b888a3-00ca-4736-96ae-1636dc7ec914"),
                            TagName = "A2_PACKOUT_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(8481)
                        },
                        new
                        {
                            Id = new Guid("9f1aabaf-fc1e-437e-8af3-2e3e17aa4192"),
                            KepServerTagNameGroupId = new Guid("bd9eae20-60c7-44cd-ae2e-96c5f015f82e"),
                            TagName = "A3_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9663)
                        },
                        new
                        {
                            Id = new Guid("d81f4aca-b172-4e2d-b138-85fca35fdb48"),
                            KepServerTagNameGroupId = new Guid("77e6d96c-f58d-46ea-a00d-5f962cfaf67b"),
                            TagName = "A4_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9735)
                        },
                        new
                        {
                            Id = new Guid("978337b6-98c6-4f65-97da-bed63b415e4a"),
                            KepServerTagNameGroupId = new Guid("c26e4341-8e94-48f8-9eb6-fd2c5061bae3"),
                            TagName = "A5_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9785)
                        },
                        new
                        {
                            Id = new Guid("bb1862ce-201c-40b1-be25-c6f13f8ec6b1"),
                            KepServerTagNameGroupId = new Guid("f5ede641-fb76-40d5-924b-5d28ceea1ac9"),
                            TagName = "A6_M2_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9847)
                        },
                        new
                        {
                            Id = new Guid("e6273b83-641d-4669-8003-be5bdd928093"),
                            KepServerTagNameGroupId = new Guid("1ace746f-f44f-47c4-bb9c-6c49fc550488"),
                            TagName = "A7_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9899)
                        },
                        new
                        {
                            Id = new Guid("d43a0be0-32cc-4e28-9f74-88d10c04b6a8"),
                            KepServerTagNameGroupId = new Guid("13667af3-8a37-456a-8d65-5e98627af1ad"),
                            TagName = "A8_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9949)
                        },
                        new
                        {
                            Id = new Guid("61a26041-c823-427b-be03-9a10f37e344a"),
                            KepServerTagNameGroupId = new Guid("3ea0d0fe-9c1b-4171-baa1-aa5b6e6422e2"),
                            TagName = "A9_M3_APC",
                            TimeStamp = new DateTime(2020, 11, 25, 7, 5, 16, 991, DateTimeKind.Local).AddTicks(9999)
                        });
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepserverMachineDowntime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CurrentVal")
                        .IsRequired()
                        .HasColumnName("currentVal")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("DowntimeMinutes")
                        .HasColumnName("downtime_minutes")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("EndStamp")
                        .HasColumnName("end_stamp")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsInitialSave")
                        .HasColumnName("isInitialSave")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OriginalEndStamp")
                        .HasColumnName("original_end_stamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("OriginalStartStamp")
                        .HasColumnName("original_start_stamp")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartStamp")
                        .HasColumnName("start_stamp")
                        .HasColumnType("datetime");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnName("tagName")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnName("time_stamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("KEPServer_MachineDowntime");
                });

            modelBuilder.Entity("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameMonitor", b =>
                {
                    b.HasOne("FmsbwebCoreApi.Entity.Iconics.KepServerTagNameGroup", "KepServerTagNameGroup")
                        .WithMany()
                        .HasForeignKey("KepServerTagNameGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FmsbwebCoreApi.Entity.Iconics.KepServerTagName", "KepServerTagName")
                        .WithMany()
                        .HasForeignKey("TagName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
